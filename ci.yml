# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI
on: [push, pull_request]
jobs:
  pytest_avalanche_shared:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: 'x64'
      - name: Use cache if possible
        # see [cache](https://github.com/actions/cache) and [pip example](https://github.com/actions/cache/blob/master/examples.md#simple-example))
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Configure AWS Credentials
        # see https://github.com/marketplace/actions/configure-aws-credentials-action-for-github-actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_service_acct_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_service_acct_secret_access_key }}
          aws-region: us-west-2
      - name: Install dependencies
        run: |
          pip install --upgrade wheel pip
          pip install -r avalanche_shared/requirements.txt -r avalanche_shared/requirements-dev.txt
      - name: Test with pytest --cov
        run: |
          pytest --cov-report=xml:coverage.avalanche_shared.xml --cov-report=term --cov=avalanche_shared avalanche_shared
      - name: Typecheck code and tests with mypy
        run: |
          mypy --config-file mypy.ini --pretty avalanche_shared
      - name: Lint with flake8
        run: |
          flake8 avalanche_shared --exclude=.ipynb_checkpoints --count --ignore=F405,W503 --select=E9,F63,F7,F82 --show-source --statistics
          # stop the build if there are Python syntax errors or undefined names
          # star imports are ok with us in some cases: https://www.flake8rules.com/rules/F405.html
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 avalanche_shared --exclude=.ipynb_checkpoints --count --ignore=F405,W503 --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test 'black' formatting conformance
        env:
          PYTHONPATH: .
        run: |
          black --check --diff avalanche_shared/shared avalanche_shared/tests
      - name: Upload codecov report
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          bash <(curl -s https://codecov.io/bash) -f coverage.avalanche_shared.xml -F avalanche_shared

  pytest_finnhub:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: 'x64'
      - name: Use cache if possible
        # see [cache](https://github.com/actions/cache) and [pip example](https://github.com/actions/cache/blob/master/examples.md#simple-example))
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Configure AWS Credentials
        # see https://github.com/marketplace/actions/configure-aws-credentials-action-for-github-actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_service_acct_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_service_acct_secret_access_key }}
          aws-region: us-west-2
      - name: Install dependencies
        run: |
          pip install --upgrade wheel pip
          pip install -r requirements.txt
      - name: Test with pytest --cov
        env:
          FINNHUB_API_KEY: ${{ Secrets.FINNHUB_API_KEY }}
          PYTHONPATH: finnhub-all/FinnhubFunction
          DIR: finnhub-all/FinnhubFunction
        run: |
          pytest --cov-report=xml:coverage.finnhub.xml --cov-report=term --cov="$DIR" "$DIR"
      - name: Typecheck code and tests with mypy
        env:
          DIR: finnhub-all/FinnhubFunction
        run: |
          mypy --config-file mypy.ini --pretty "$DIR"

      - name: Lint with flake8
        env:
          DIR: finnhub-all/FinnhubFunction
        run: |
          flake8 "$DIR" --exclude=.ipynb_checkpoints --count --ignore=F405,W503 --select=E9,F63,F7,F82 --show-source --statistics
          # stop the build if there are Python syntax errors or undefined names
          # star imports are ok with us in some cases: https://www.flake8rules.com/rules/F405.html

          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 "$DIR" --exclude=.ipynb_checkpoints --count --ignore=F405,W503 --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test 'black' formatting conformance
        env:
          PYTHONPATH: finnhub-all/FinnhubFunction
          DIR: finnhub-all/FinnhubFunction
        run: |
          black --check --diff finnhub-all
      - name: Upload codecov report
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          bash <(curl -s https://codecov.io/bash) -f coverage.finnhub.xml -F finnhub
      #- name: Run notebook-based tests
      #  env:
      #    FINNHUB_API_KEY: ${{ Secrets.FINNHUB_API_KEY }}
      #    PYTHONPATH: ../../FinnhubFunction
      #  # see [nbval docs](https://github.com/computationalmodelling/nbval#execution)
      #  run: |
      #    pip install fastcore nbval pandas
      #    pytest --nbval finnhub-all/FinnhubFunction/tests/nbs/test_*.ipynb -W ignore::DeprecationWarning --sanitize-with finnhub-all/FinnhubFunction/nbs/nbval_sanitize.cfg
  pytest_first_rate_data:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: 'x64'
      - name: Use cache if possible
        # see [cache](https://github.com/actions/cache) and [pip example](https://github.com/actions/cache/blob/master/examples.md#simple-example))
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Configure AWS Credentials
        # see https://github.com/marketplace/actions/configure-aws-credentials-action-for-github-actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_service_acct_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_service_acct_secret_access_key }}
          aws-region: us-west-2
      - name: Install dependencies
        run: |
          pip install --upgrade wheel
          pip install --upgrade pip
          pip install -r first_rate_data/requirements.txt
#      - name: Test with pytest --cov
#        run: |
#          pytest --cov-report=xml:coverage.first_rate_data.xml --cov-report=term --cov=first_rate_data first_rate_data
      - name: Typecheck code and tests with mypy
        run: |
          mypy --config-file mypy.ini --pretty first_rate_data
      - name: Lint with flake8
        run: |
          flake8 first_rate_data  --exclude=.ipynb_checkpoints --count --ignore=F405,W503 --select=E9,F63,F7,F82 --show-source --statistics
          # stop the build if there are Python syntax errors or undefined names
          # star imports are ok with us in some cases: https://www.flake8rules.com/rules/F405.html
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 first_rate_data --exclude=.ipynb_checkpoints --count --ignore=F405,W503 --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test 'black' formatting conformance
        env:
          PYTHONPATH: .
        run: |
          black --check --diff first_rate_data
      - name: Upload codecov report
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          bash <(curl -s https://codecov.io/bash) -f coverage.first_rate_data.xml -F first_rate_data
